package model.heros;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.util.Tuple;
import model.armors.Armors;
import model.weapons.Weapons;

public abstract class Hero {
    @DAttr(name = "id", type = DAttr.Type.String, mutable = false, id = true, auto = true)
    protected String id;
    @DAttr(name = "name", type = DAttr.Type.String, mutable = true, length = 10)
    protected String name;
    @DAttr(name = "level", type = DAttr.Type.Integer, mutable = false, min = 1, max = 100)
    protected Integer level;
    @DAttr(name = "attack", type = DAttr.Type.Integer, mutable = false, min = 10, max = 1000)
    protected Integer attack;
    @DAttr(name = "defense", type = DAttr.Type.Integer, mutable = false, min = 10, max = 1000)
    protected Integer defense;
    @DAttr(name = "hp", type = DAttr.Type.Integer, mutable = false, min = 0, max = 1000)
    protected Integer hp;
    @DAttr(name = "strength", type = DAttr.Type.Integer, mutable = false, min = 0, max = 100)
    protected int strength;
    @DAttr(name = "dexterity", type = DAttr.Type.Integer, mutable = false, min = 0, max = 100)
    protected int dexterity;
    @DAttr(name = "intelligent", type = DAttr.Type.Integer, mutable = false, min = 0, max = 100)
    protected int intelligent;



    @DAttr(name = "weapons", type = DAttr.Type.Domain, length = 10, optional = false)
    @DAssoc(ascName = "heros-has-weapons", role = "weapon", ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.Many,
            associate = @DAssoc.Associate(type = Weapons.class, cardMin = 1, cardMax = 1), dependsOn = true)
    protected Weapons weapons;
    @DAttr(name = "armors", type = DAttr.Type.Domain, length = 10, optional = false)
    @DAssoc(ascName = "heros-has-armors", role = "armor", ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.Many,
            associate = @DAssoc.Associate(type = Armors.class, cardMin = 1, cardMax = 1), dependsOn = true)
    protected Armors armors;

    private static int idCounter = 0;

    @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
    public static void updateAutoGeneratedValue(
            DAttr attrib,
            Tuple derivingValue,
            Object minVal,
            Object maxVal) throws ConstraintViolationException {
        if (minVal != null && maxVal != null) {
            if (attrib.name().equals("id")) {
                int maxIdVal = (Integer) maxVal;
                if (maxIdVal > idCounter)
                    idCounter = maxIdVal;
            }
        }
    }

    //    protected static int nextId(int currID) {
//        if (currID == 0) {
//            idCounter++;
//            return idCounter;
//        } else {
//            if (currID > idCounter)
//                idCounter = currID;
//            return currID;
//        }
//    }
    protected static String nextId(String id) {

        idCounter++;
        return id + idCounter;

    }

    protected Hero(String id, String name, Integer level, Integer attack, Integer defense, Integer hp, Integer strength, Integer dexterity, Integer intelligent, Weapons weapons, Armors armors) {
        if (this instanceof Warrior) {
            this.id = Warrior.class.getSimpleName()+nextId(id);
        } else if (this instanceof Mage){
            this.id = Mage.class.getSimpleName()+nextId(id);
        } else if (this instanceof Rogue){
            this.id = Rogue.class.getSimpleName()+nextId(id);
        }
        this.name = name;
        this.level = level;
        this.attack = attack;
        this.defense = defense;
        this.hp = hp;
        this.strength = strength;
        this.dexterity = dexterity;
        this.intelligent = intelligent;
        this.weapons = weapons;
        this.armors = armors;
        // idCounter++;
    }

    public Hero(String name, Integer level, Integer attack, Integer defense, Integer hp, Integer strength, Integer dexterity, Integer intelligent, Weapons weapons, Armors armors) {
        this("", name, 1, 10, 10, 100,0,0,0, weapons, armors);
    }

    public Hero(String name, Weapons weapons, Armors armors) {
        this("", name, 1, 10, 10, 100,0,0,0, weapons, armors);
    }



    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public int getHp() {
        return hp;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        attack = attack - this.level + level;
        defense = defense - this.level + level;
        this.level = level;
    }

    public String tauntLine() {
        return "I am ready for anything";
    }


    public int getAttack() {
        return attack;
    }

    public int getDefense() {
        return defense;
    }


    public Weapons getWeapons() {
        return weapons;
    }

    public void setWeapons(Weapons weapons) {
        this.weapons = weapons;
    }

    public Armors getArmors() {
        return armors;
    }

    public void setArmors(Armors armors) {
        this.armors = armors;
    }
}
