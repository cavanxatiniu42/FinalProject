package model.armors;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.util.Tuple;

public abstract class Armors {
    @DAttr(name = "id", type = DAttr.Type.String, mutable = false, id = true, auto = true)
    protected String id;
    @DAttr(name = "name", type = DAttr.Type.String, mutable = true, optional = true, min = 1, max = 20)
    protected String name;
    @DAttr(name = "strength", type = DAttr.Type.Integer, mutable = false, min = 1, max = 20)
    protected int strength;
    @DAttr(name = "intelligent", type = DAttr.Type.Integer, mutable = false, min = 1, max = 20)
    protected int intelligent;
    @DAttr(name = "dexterity", type = DAttr.Type.Integer, mutable = false, min = 1, max = 20)
    protected int dexterity;
    private static int idCounter;

    @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
    public static void updateAutoGeneratedValue(
            DAttr attrib,
            Tuple derivingValue,
            Object minVal,
            Object maxVal) throws ConstraintViolationException {
        if (minVal != null && maxVal != null) {
            if (attrib.name().equals("id")) {
                int maxIdVal = (Integer) maxVal;
                if (maxIdVal > idCounter)
                    idCounter = maxIdVal;
            }
        }
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setStrength(int strength) {
        this.strength = strength;
    }

    public void setIntelligent(int intelligent) {
        this.intelligent = intelligent;
    }

    public void setDexterity(int dexterity) {
        this.dexterity = dexterity;
    }

    //    protected static int nextId(int currID) {
//        if (currID == 0) {
//            idCounter++;
//            return idCounter;
//        } else {
//            if (currID > idCounter)
//                idCounter = currID;
//            return currID;
//        }
//    }
    protected static String nextId(String id) {
        idCounter++;
        return id + idCounter;

    }

    public Armors(String id, String name, Integer strength, Integer intelligent, Integer bonusDexterity) {
        if (this instanceof Chainmail) {
            this.id = Chainmail.class.getSimpleName() + nextId(id);
        } else if (this instanceof Leather){
            this.id = Leather.class.getSimpleName()+nextId(id);
        } else if (this instanceof Robe){
            this.id = Robe.class.getSimpleName()+nextId(id);
        }
        this.name = name;
        this.strength = strength;
        this.intelligent = intelligent;
        this.dexterity = bonusDexterity;
    }

    public Armors(String name, Integer strength, Integer intelligent, Integer bonusDexterity) {
        this("", name, 10, 10, 10);
    }

    public Armors(String name) {
        this("", name, 10, 10, 10);
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setTaunt(String taunt) {
        this.name = taunt;
    }

    public String getTaunt() {
        return name;
    }

    public int getStrength() {
        return strength;
    }

    public int getIntelligent() {
        return intelligent;
    }

    public int getDexterity() {
        return dexterity;
    }
}
